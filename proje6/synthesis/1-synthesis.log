
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/selin/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/TopModule/TopModule.v
Parsing SystemVerilog input from `/openlane/designs/TopModule/TopModule.v' to AST representation.
Storing AST representation for module `$abstract\InstructionDecoder'.
Storing AST representation for module `$abstract\RegisterFile'.
Storing AST representation for module `$abstract\ALU'.
Storing AST representation for module `$abstract\HexTo7Segment'.
Storing AST representation for module `$abstract\DisplayDriver'.
Storing AST representation for module `$abstract\TopModule'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\TopModule'.
Generating RTLIL representation for module `\TopModule'.

4.1. Analyzing design hierarchy..
Top module:  \TopModule

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\DisplayDriver'.
Generating RTLIL representation for module `\DisplayDriver'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionDecoder'.
Generating RTLIL representation for module `\InstructionDecoder'.

4.6. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayDriver
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\HexTo7Segment'.
Generating RTLIL representation for module `\HexTo7Segment'.

4.8. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayDriver
Used module:         \HexTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder

4.9. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayDriver
Used module:         \HexTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Removing unused module `$abstract\TopModule'.
Removing unused module `$abstract\DisplayDriver'.
Removing unused module `$abstract\HexTo7Segment'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\InstructionDecoder'.
Removed 6 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/hierarchy.dot'.
Dumping module TopModule to page 1.
Renaming module TopModule to TopModule.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayDriver
Used module:         \HexTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder

7.2. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayDriver
Used module:         \HexTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:197$1 in module TopModule.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:31$45 in module InstructionDecoder.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:58$21 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:71$12 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:127$9 in module DisplayDriver.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/TopModule.v:88$83 in module HexTo7Segment.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 30 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
  Set init value: \pc = 5'00000
Found init rule in `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:114$11'.
  Set init value: \refresh_counter = 17'00000000000000000
Found init rule in `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:112$10'.
  Set init value: \digit_select = 3'000

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~8 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TopModule.$proc$/openlane/designs/TopModule/TopModule.v:197$1'.
     1/2: $1\imm_ext[31:0]
     2/2: $1\isImmediate[0:0]
Creating decoders for process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
Creating decoders for process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:31$45'.
     1/2: $0\instruction[31:0]
     2/2: $0\pc[4:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
     1/3: $1$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_EN[31:0]$27
     2/3: $1$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_DATA[31:0]$26
     3/3: $1$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_ADDR[4:0]$25
Creating decoders for process `\ALU.$proc$/openlane/designs/TopModule/TopModule.v:71$12'.
     1/1: $1\result[31:0]
Creating decoders for process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:114$11'.
Creating decoders for process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:112$10'.
Creating decoders for process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:127$9'.
     1/2: $1\current_nibble[3:0]
     2/2: $1\an[3:0]
Creating decoders for process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:121$5'.
     1/1: $0\digit_select[2:0]
Creating decoders for process `\HexTo7Segment.$proc$/openlane/designs/TopModule/TopModule.v:88$83'.
     1/1: $1\seg[6:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\TopModule.\imm_ext' from process `\TopModule.$proc$/openlane/designs/TopModule/TopModule.v:197$1'.
No latch inferred for signal `\TopModule.\isImmediate' from process `\TopModule.$proc$/openlane/designs/TopModule/TopModule.v:197$1'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:11$28_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:12$29_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:13$30_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:14$31_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:15$32_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:16$33_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:17$34_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:18$35_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:19$36_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:20$37_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:21$38_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:22$39_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:23$40_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:24$41_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:25$42_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:26$43_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\InstructionDecoder.$memwr$\instruction_memory$/openlane/designs/TopModule/TopModule.v:27$44_EN' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/openlane/designs/TopModule/TopModule.v:71$12'.
No latch inferred for signal `\DisplayDriver.\an' from process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:127$9'.
No latch inferred for signal `\DisplayDriver.\current_nibble' from process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:127$9'.
No latch inferred for signal `\HexTo7Segment.\seg' from process `\HexTo7Segment.$proc$/openlane/designs/TopModule/TopModule.v:88$83'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\InstructionDecoder.\instruction' using process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:31$45'.
  created $dff cell `$procdff$133' with positive edge clock.
Creating register for signal `\InstructionDecoder.\pc' using process `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:31$45'.
  created $dff cell `$procdff$134' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_ADDR' using process `\RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
  created $dff cell `$procdff$135' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_DATA' using process `\RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
  created $dff cell `$procdff$136' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/TopModule.v:60$18_EN' using process `\RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\DisplayDriver.\digit_select' using process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:121$5'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\DisplayDriver.\refresh_counter' using process `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:121$5'.
  created $dff cell `$procdff$139' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TopModule.$proc$/openlane/designs/TopModule/TopModule.v:197$1'.
Removing empty process `TopModule.$proc$/openlane/designs/TopModule/TopModule.v:197$1'.
Removing empty process `InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:0$65'.
Found and cleaned up 3 empty switches in `\InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:31$45'.
Removing empty process `InstructionDecoder.$proc$/openlane/designs/TopModule/TopModule.v:31$45'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
Removing empty process `RegisterFile.$proc$/openlane/designs/TopModule/TopModule.v:58$21'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/TopModule/TopModule.v:71$12'.
Removing empty process `ALU.$proc$/openlane/designs/TopModule/TopModule.v:71$12'.
Removing empty process `DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:114$11'.
Removing empty process `DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:112$10'.
Found and cleaned up 1 empty switch in `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:127$9'.
Removing empty process `DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:127$9'.
Found and cleaned up 1 empty switch in `\DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:121$5'.
Removing empty process `DisplayDriver.$proc$/openlane/designs/TopModule/TopModule.v:121$5'.
Found and cleaned up 1 empty switch in `\HexTo7Segment.$proc$/openlane/designs/TopModule/TopModule.v:88$83'.
Removing empty process `HexTo7Segment.$proc$/openlane/designs/TopModule/TopModule.v:88$83'.
Cleaned up 9 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Checking module InstructionDecoder...
Checking module RegisterFile...
Checking module ALU...
Checking module DisplayDriver...
Checking module HexTo7Segment...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
Optimizing module InstructionDecoder.
Optimizing module RegisterFile.
Optimizing module ALU.
Optimizing module DisplayDriver.
<suppressed ~3 debug messages>
Optimizing module HexTo7Segment.

21. Executing FLATTEN pass (flatten design).
Deleting now unused module InstructionDecoder.
Deleting now unused module RegisterFile.
Deleting now unused module ALU.
Deleting now unused module DisplayDriver.
Deleting now unused module HexTo7Segment.
<suppressed ~5 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~3 debug messages>

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 4 unused cells and 83 unused wires.
<suppressed ~7 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\display.$procdff$138 ($dff) from module TopModule (D = $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8_Y [2:0], Q = \display.digit_select).
Adding SRST signal on $flatten\decoder.$procdff$134 ($dff) from module TopModule (D = $flatten\decoder.$procmux$97_Y, Q = \decoder.pc, rval = 5'00000).
Adding EN signal on $auto$ff.cc:266:slice$142 ($sdff) from module TopModule (D = $flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46_Y [4:0], Q = \decoder.pc).
Adding SRST signal on $flatten\decoder.$procdff$133 ($dff) from module TopModule (D = $flatten\decoder.$memrd$\instruction_memory$/openlane/designs/TopModule/TopModule.v:38$47_DATA, Q = \decoder.instruction, rval = 0).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:11$48 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:12$49 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:13$50 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:14$51 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:15$52 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:16$53 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:17$54 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:18$55 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:19$56 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:20$57 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:21$58 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:22$59 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:23$60 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:24$61 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:25$62 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:26$63 (decoder.instruction_memory).
Removed top 27 address bits (of 32) from memory init port TopModule.$flatten\decoder.$meminit$\instruction_memory$/openlane/designs/TopModule/TopModule.v:27$64 (decoder.instruction_memory).
Removed top 28 address bits (of 32) from memory init port TopModule.$flatten\display.\decoder.$auto$mem.cc:328:emit$87 ($flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85).
Removed top 31 bits (of 32) from port B of cell TopModule.$flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46 ($add).
Removed top 27 bits (of 32) from port Y of cell TopModule.$flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46 ($add).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\alu.$procmux$117_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\alu.$procmux$116_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell TopModule.$flatten\display.$procmux$122_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\display.$procmux$121_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\display.$procmux$120_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8 ($add).
Removed top 29 bits (of 32) from port Y of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8 ($add).
Removed top 31 bits (of 32) from port B of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/TopModule.v:122$6 ($add).
Removed top 15 bits (of 32) from port Y of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/TopModule.v:122$6 ($add).
Removed top 27 bits (of 32) from wire TopModule.$flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46_Y.
Removed top 29 bits (of 32) from wire TopModule.$flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8_Y.
Removed top 9 bits (of 32) from wire TopModule.RD1.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TopModule:
  creating $macc model for $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:73$13 ($add).
  creating $macc model for $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:76$16 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:74$14 ($sub).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:77$17 ($sub).
  creating $macc model for $flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46 ($add).
  creating $macc model for $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:122$6 ($add).
  creating $macc model for $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8 ($add).
  creating $alu model for $macc $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8.
  creating $alu model for $macc $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:122$6.
  creating $alu model for $macc $flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:77$17.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:74$14.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:76$16.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:73$13.
  creating $alu cell for $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:73$13: $auto$alumacc.cc:485:replace_alu$148
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:74$14: $auto$alumacc.cc:485:replace_alu$151
  creating $alu cell for $flatten\alu.$add$/openlane/designs/TopModule/TopModule.v:76$16: $auto$alumacc.cc:485:replace_alu$154
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/TopModule/TopModule.v:77$17: $auto$alumacc.cc:485:replace_alu$157
  creating $alu cell for $flatten\decoder.$add$/openlane/designs/TopModule/TopModule.v:35$46: $auto$alumacc.cc:485:replace_alu$160
  creating $alu cell for $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:122$6: $auto$alumacc.cc:485:replace_alu$163
  creating $alu cell for $flatten\display.$add$/openlane/designs/TopModule/TopModule.v:124$8: $auto$alumacc.cc:485:replace_alu$166
  created 7 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module TopModule that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:56$20 ($memrd):
    Found 3 activation_patterns using ctrl signal { $flatten\alu.$procmux$117_CMP $flatten\alu.$procmux$116_CMP $flatten\alu.$procmux$115_CMP }.
    Found 1 candidates: $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19
    Analyzing resource sharing with $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19 ($memrd):
      Found 5 activation_patterns using ctrl signal { $flatten\alu.$procmux$117_CMP $flatten\alu.$procmux$116_CMP $flatten\alu.$procmux$115_CMP $eq$/openlane/designs/TopModule/TopModule.v:198$3_Y $eq$/openlane/designs/TopModule/TopModule.v:198$2_Y }.
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:56$20: $flatten\alu.$procmux$117_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:56$20: $flatten\alu.$procmux$115_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:56$20: $flatten\alu.$procmux$116_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19: $flatten\alu.$procmux$117_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19: $eq$/openlane/designs/TopModule/TopModule.v:198$2_Y = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19: $flatten\alu.$procmux$115_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19: $flatten\alu.$procmux$116_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19: $eq$/openlane/designs/TopModule/TopModule.v:198$3_Y = 1'1
      Size of SAT problem: 0 cells, 61 variables, 172 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\alu.$procmux$117_CMP $flatten\alu.$procmux$116_CMP $flatten\alu.$procmux$115_CMP $eq$/openlane/designs/TopModule/TopModule.v:198$3_Y $eq$/openlane/designs/TopModule/TopModule.v:198$2_Y } = 5'00100
  Analyzing resource sharing options for $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/TopModule.v:55$19 ($memrd):
    Found 5 activation_patterns using ctrl signal { $flatten\alu.$procmux$117_CMP $flatten\alu.$procmux$116_CMP $flatten\alu.$procmux$115_CMP $eq$/openlane/designs/TopModule/TopModule.v:198$3_Y $eq$/openlane/designs/TopModule/TopModule.v:198$2_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/designs/TopModule/TopModule.v:75$15 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$115_CMP.
    No candidates found.

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
TopModule.decoder.instruction_memory: removing const-0 lane 4
TopModule.decoder.instruction_memory: removing const-0 lane 5
TopModule.decoder.instruction_memory: removing const-0 lane 6
TopModule.decoder.instruction_memory: removing const-0 lane 7
TopModule.decoder.instruction_memory: removing const-0 lane 8
TopModule.decoder.instruction_memory: removing const-0 lane 9
TopModule.decoder.instruction_memory: removing const-0 lane 10
TopModule.decoder.instruction_memory: removing const-0 lane 29
TopModule.decoder.instruction_memory: removing const-0 lane 30
TopModule.decoder.instruction_memory: removing const-0 lane 31
Performed a total of 1 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing TopModule.rf.registers write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85'[0] in module `\TopModule': no output FF found.
Checking read port `\decoder.instruction_memory'[0] in module `\TopModule': merging output FF to cell.
Checking read port `\rf.registers'[0] in module `\TopModule': no output FF found.
Checking read port `\rf.registers'[1] in module `\TopModule': no output FF found.
Checking read port address `$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85'[0] in module `\TopModule': no address FF found.
Checking read port address `\rf.registers'[0] in module `\TopModule': no address FF found.
Checking read port address `\rf.registers'[1] in module `\TopModule': no address FF found.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory TopModule.rf.registers by address:

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~21 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$144 ($sdff) from module TopModule.

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

35.5. Rerunning OPT passes. (Removed registers in this run.)

35.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~14 debug messages>

35.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

35.8. Executing OPT_DFF pass (perform DFF optimizations).

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 32 unused cells and 45 unused wires.
<suppressed ~33 debug messages>

35.10. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85 in module \TopModule:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \decoder.instruction_memory in module \TopModule:
  created 22 $dff cells and 0 static cells of width 22.
Extracted data FF from read port 0 of TopModule.decoder.instruction_memory: $\decoder.instruction_memory$rdreg[0]
  read interface: 1 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \rf.registers in module \TopModule:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~36 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/6 on $pmux $flatten\alu.$procmux$112.
    dead port 2/6 on $pmux $flatten\alu.$procmux$112.
    dead port 3/6 on $pmux $flatten\alu.$procmux$112.
    dead port 4/6 on $pmux $flatten\alu.$procmux$112.
    dead port 5/6 on $pmux $flatten\alu.$procmux$112.
Removed 5 multiplexer ports.
<suppressed ~39 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][10]$386:
      Old ports: A=22'1100010100101000000001, B=22'0010000000000000001110, Y=$memory\decoder.instruction_memory$rdmux[0][3][5]$a$348
      New ports: A=2'01, B=2'10, Y=$memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [1:0]
      New connections: $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [21:2] = { $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [1] 2'00 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] 2'00 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [0] 5'00000 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [1] $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [1] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][9]$383:
      Old ports: A=22'0100011000111000000000, B=22'0100011101000000000000, Y=$memory\decoder.instruction_memory$rdmux[0][3][4]$b$346
      New ports: A=2'01, B=2'10, Y={ $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [12] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [9] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [21:13] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [11:10] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [8:0] } = { 7'0100011 $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [12] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [9] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [9] 9'000000000 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][8]$380:
      Old ports: A=22'1100011100000000000001, B=22'0100100000110001110000, Y=$memory\decoder.instruction_memory$rdmux[0][3][4]$a$345
      New ports: A=2'01, B=2'10, Y={ $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [21:5] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [3:1] } = { $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] 3'100 $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] 2'00 $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] 3'000 $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] 3'000 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][7]$377:
      Old ports: A=22'0110010000101000000111, B=22'1100011000000000000001, Y=$memory\decoder.instruction_memory$rdmux[0][3][3]$b$343
      New ports: A=2'01, B=2'10, Y={ $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [15] $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [21:16] $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [14:2] $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [0] } = { $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [15] 1'1 $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] 6'001000 $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] 6'000000 $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][6]$374:
      Old ports: A=22'1100010000000000000100, B=22'0100010100000000000000, Y=$memory\decoder.instruction_memory$rdmux[0][3][3]$a$342
      New ports: A=2'01, B=2'10, Y={ $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [14] $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [2] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [21:15] $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [13:3] $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [1:0] } = { $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [2] 19'1000100000000000000 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][3]$365:
      Old ports: A=22'1001111000111101010000, B=22'x, Y=$memory\decoder.instruction_memory$rdmux[0][3][1]$b$337
      New ports: A=2'10, B=2'x, Y={ $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [21:5] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [3:1] } = { $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][2]$362:
      Old ports: A=22'1101010100000000000010, B=22'0010000000000000001100, Y=$memory\decoder.instruction_memory$rdmux[0][3][1]$a$336
      New ports: A=2'01, B=2'10, Y=$memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [2:1]
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [21:3] $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [0] } = { $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [1] $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [1] $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [2:1] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [1] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [1] 10'0000000000 $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][1]$359:
      Old ports: A=22'0101100101010011110000, B=22'1111010011001000000101, Y=$memory\decoder.instruction_memory$rdmux[0][3][0]$b$334
      New ports: A=2'10, B=2'01, Y={ $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [21:5] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [3:1] } = { $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 1'1 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 1'1 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 2'10 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][4][0]$356:
      Old ports: A=22'1100101000000000001010, B=22'1100111100000000001111, Y=$memory\decoder.instruction_memory$rdmux[0][3][0]$a$333
      New ports: A=1'0, B=1'1, Y=$memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0]
      New connections: $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [21:1] = { 5'11001 $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0] 1'1 $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0] 11'00000000001 $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][3][4]$299:
      Old ports: A=7'0000000, B=7'0010000, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282
      New ports: A=1'0, B=1'1, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282 [4]
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282 [6:5] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][3][3]$296:
      Old ports: A=7'0000010, B=7'1111000, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [1] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [6:4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [2] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [0] } = { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][3][2]$293:
      Old ports: A=7'0011001, B=7'0010010, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279
      New ports: A=2'01, B=2'10, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279 [1:0]
      New connections: $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279 [6:2] = { 3'001 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][3][1]$290:
      Old ports: A=7'0100100, B=7'0110000, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [2] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [6:5] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [1:0] } = 5'01000
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][3][0]$287:
      Old ports: A=7'1000000, B=7'1111001, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276
      New ports: A=1'0, B=1'1, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0]
      New connections: $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [6:1] = { 1'1 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] 2'00 }
    Consolidated identical input bits for $pmux cell $flatten\display.$procmux$119:
      Old ports: A=4'0000, B={ \display.data_in [3:0] \display.data_in [7:4] \display.data_in [11:8] \display.data_in [15:12] }, Y=\display.decoder.hex
      New connections: \display.decoder.hex = 4'0000
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][3][5]$347:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][3][5]$a$348, B=22'x, Y=$memory\decoder.instruction_memory$rdmux[0][2][2]$b$328
      New ports: A={ 1'0 $memory\decoder.instruction_memory$rdmux[0][3][5]$a$348 [1:0] }, B=3'x, Y={ $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [1:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [21:5] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [3:2] } = { $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [1] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [1] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [1] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][3][4]$344:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][3][4]$a$345, B=$memory\decoder.instruction_memory$rdmux[0][3][4]$b$346, Y=$memory\decoder.instruction_memory$rdmux[0][2][2]$a$327
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [4] $memory\decoder.instruction_memory$rdmux[0][3][4]$a$345 [0] }, B={ 1'1 $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [12] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [12] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [9] $memory\decoder.instruction_memory$rdmux[0][3][4]$b$346 [9] 2'00 }, Y={ $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [15:14] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [12] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [10:9] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [21:16] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [13] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [11] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [8:5] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [3:1] } = { $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [0] 3'100 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [15] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [10] 2'00 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [4] 3'000 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][3][3]$341:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][3][3]$a$342, B=$memory\decoder.instruction_memory$rdmux[0][3][3]$b$343, Y=$memory\decoder.instruction_memory$rdmux[0][2][1]$b$325
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [2] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [14] $memory\decoder.instruction_memory$rdmux[0][3][3]$a$342 [2] 2'00 }, B={ $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [15] $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [15] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] $memory\decoder.instruction_memory$rdmux[0][3][3]$b$343 [1] 1'1 }, Y={ $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [21] $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [15:14] $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [2:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [20:16] $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [13:3] } = { 1'1 $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [1] 5'00100 $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [1] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [1] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][3][1]$335:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][3][1]$a$336, B=$memory\decoder.instruction_memory$rdmux[0][3][1]$b$337, Y=$memory\decoder.instruction_memory$rdmux[0][2][0]$b$322
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [1] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][1]$a$336 [2:1] 1'0 }, B={ $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [4] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] $memory\decoder.instruction_memory$rdmux[0][3][1]$b$337 [0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [21:17] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [15:5] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [3] } = { $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [1] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [1:0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][3][0]$332:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][3][0]$a$333, B=$memory\decoder.instruction_memory$rdmux[0][3][0]$b$334, Y=$memory\decoder.instruction_memory$rdmux[0][2][0]$a$321
      New ports: A={ 2'11 $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0] 4'0001 $memory\decoder.instruction_memory$rdmux[0][3][0]$a$333 [0] }, B={ $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] 1'1 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [4] 1'0 $memory\decoder.instruction_memory$rdmux[0][3][0]$b$334 [0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [21] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [17] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [14] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [12] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [20:18] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [16:15] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [13] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [11:10] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [8:5] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [3:2] } = { 1'1 $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [12] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1:0] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$281:
      Old ports: A=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282, B=7'1111111, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273
      New ports: A={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][2]$a$282 [4] 1'0 }, B=2'11, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [6:5] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [3:1] } = { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$278:
      Old ports: A=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279, B=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271
      New ports: A={ 2'01 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$a$279 [1:0] }, B={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][1]$b$280 [1] 1'0 }, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271 [5:3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271 [1:0] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271 [6] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271 [2] } = { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$b$271 [5] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$275:
      Old ports: A=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276, B=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270
      New ports: A={ 1'1 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] 1'0 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$a$276 [0] }, B={ 2'01 $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][2][0]$b$277 [2] 1'0 }, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [6:4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [2] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [0] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [3] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [1] } = { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][0]$a$270 [0] 1'0 }
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][2][2]$326:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][2][2]$a$327, B=$memory\decoder.instruction_memory$rdmux[0][2][2]$b$328, Y=$memory\decoder.instruction_memory$rdmux[0][1][1]$a$318
      New ports: A={ 1'1 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [15] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [15:14] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [12] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [10] $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [10:9] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [4] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][2]$a$327 [0] }, B={ $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [0] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [4] $memory\decoder.instruction_memory$rdmux[0][2][2]$b$328 [1:0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [20] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [16:14] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [12:9] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [7] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [4] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [1:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [21] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [19:17] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [13] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [8] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [6:5] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [3:2] } = { $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [0] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [1] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [7] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [4] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [7] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [7] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [4] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [4] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [1] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [1] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][2][1]$323:
      Old ports: A=22'x, B=$memory\decoder.instruction_memory$rdmux[0][2][1]$b$325, Y=$memory\decoder.instruction_memory$rdmux[0][1][0]$b$316
      New ports: A=8'x, B={ $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [21] 1'1 $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [15:14] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][1]$b$325 [2:0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [21] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [16:14] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [20:17] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [13:4] } = { $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [16] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][2][0]$320:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][2][0]$a$321, B=$memory\decoder.instruction_memory$rdmux[0][2][0]$b$322, Y=$memory\decoder.instruction_memory$rdmux[0][1][0]$a$315
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [21] 1'1 $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [12] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [17] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [14] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [12] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [9] 1'0 $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1:0] $memory\decoder.instruction_memory$rdmux[0][2][0]$a$321 [1:0] }, B={ $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [1] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [16] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [1:0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [0] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [4] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2] $memory\decoder.instruction_memory$rdmux[0][2][0]$b$322 [2:0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [21:12] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [9:8] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [5:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [11:10] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [7:6] } = { $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [8] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [4] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [5:4] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$272:
      Old ports: A=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273, B=7'1111111, Y=$memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268
      New ports: A={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][1][1]$a$273 [0] }, B=2'11, Y={ $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [4] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] }
      New connections: { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [6:5] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [3:1] } = { $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] $memory$flatten\display.\decoder.$auto$proc_rom.cc:150:do_switch$85$rdmux[0][0][0]$b$268 [0] }
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][1][1]$317:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][1][1]$a$318, B=22'x, Y=$memory\decoder.instruction_memory$rdmux[0][0][0]$b$313
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [20] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [16:14] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [12:9] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [7] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [4] $memory\decoder.instruction_memory$rdmux[0][1][1]$a$318 [1:0] }, B=12'x, Y={ $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [20] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [16:14] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [12:9] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [21] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [19:17] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [13] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [8] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [6:5] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [3:2] } = { $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [0] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] }
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][1][0]$314:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][1][0]$a$315, B=$memory\decoder.instruction_memory$rdmux[0][1][0]$b$316, Y=$memory\decoder.instruction_memory$rdmux[0][0][0]$a$312
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [21:12] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [8] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [9:8] $memory\decoder.instruction_memory$rdmux[0][1][0]$a$315 [5:0] }, B={ $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [21] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [16] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [16:14] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [1] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3] $memory\decoder.instruction_memory$rdmux[0][1][0]$b$316 [3:0] }, Y={ $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [21:11] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [9:8] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [5:0] }
      New connections: { $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [10] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [7:6] } = { $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [5:4] }
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory\decoder.instruction_memory$rdmux[0][0][0]$311:
      Old ports: A=$memory\decoder.instruction_memory$rdmux[0][0][0]$a$312, B=$memory\decoder.instruction_memory$rdmux[0][0][0]$b$313, Y=$\decoder.instruction_memory$rdreg[0]$d
      New ports: A={ $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [21:11] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [9:8] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [5] $memory\decoder.instruction_memory$rdmux[0][0][0]$a$312 [5:0] }, B={ $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [0] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [20] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [16:14] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [12:9] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [7] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [4] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1] $memory\decoder.instruction_memory$rdmux[0][0][0]$b$313 [1:0] }, Y={ $\decoder.instruction_memory$rdreg[0]$d [21:7] $\decoder.instruction_memory$rdreg[0]$d [5:0] }
      New connections: $\decoder.instruction_memory$rdreg[0]$d [6] = $\decoder.instruction_memory$rdreg[0]$d [4]
  Optimizing cells in module \TopModule.
Performed a total of 30 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 201 unused cells and 376 unused wires.
<suppressed ~235 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~27 debug messages>

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~463 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~140 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 20 unused cells and 133 unused wires.
<suppressed ~21 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\TopModule' to `<abc-temp-dir>/input.blif'..
Extracted 87 gates and 108 wires to a netlist network with 20 inputs and 25 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:               AND cells:        4
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:                OR cells:       32
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               XOR cells:       13
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       25
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 76 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \TopModule

42.2. Analyzing design hierarchy..
Top module:  \TopModule
Removed 0 unused modules.

43. Printing statistics.

=== TopModule ===

   Number of wires:                104
   Number of wire bits:            687
   Number of public wires:          42
   Number of public wire bits:     589
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $_ANDNOT_                      11
     $_AND_                          4
     $_DFFE_PN_                      3
     $_DFF_P_                       17
     $_NAND_                         9
     $_NOR_                          1
     $_NOT_                          3
     $_ORNOT_                        5
     $_OR_                          32
     $_XNOR_                         4
     $_XOR_                         13

44. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/post_techmap.dot'.
Dumping module TopModule to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 34 unused wires.
<suppressed ~34 debug messages>

49. Printing statistics.

=== TopModule ===

   Number of wires:                 70
   Number of wire bits:            164
   Number of public wires:           8
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $_ANDNOT_                      11
     $_AND_                          4
     $_DFFE_PN_                      3
     $_DFF_P_                       17
     $_NAND_                         9
     $_NOR_                          1
     $_NOT_                          3
     $_ORNOT_                        5
     $_OR_                          32
     $_XNOR_                         4
     $_XOR_                         13

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/selin/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/selin/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/selin/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/selin/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\TopModule':
  mapped 20 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== TopModule ===

   Number of wires:                 73
   Number of wire bits:            167
   Number of public wires:           8
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_ANDNOT_                      11
     $_AND_                          4
     $_MUX_                          3
     $_NAND_                         9
     $_NOR_                          1
     $_NOT_                          3
     $_ORNOT_                        5
     $_OR_                          32
     $_XNOR_                         4
     $_XOR_                         13
     sky130_fd_sc_hd__dfxtp_2       20

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\TopModule' to `/tmp/yosys-abc-eDGgvZ/input.blif'..
Extracted 85 gates and 105 wires to a netlist network with 20 inputs and 24 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-eDGgvZ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-eDGgvZ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-eDGgvZ/input.blif 
ABC: + read_lib -w /openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/TopModule/runs/RUN_2025.06.16_17.53.50/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1973.89 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     68 ( 19.1 %)   Cap = 14.4 ff (  4.4 %)   Area =      569.30 ( 80.9 %)   Delay =  1983.14 ps  ( 14.7 %)               
ABC: Path  0 --      12 : 0    3 pi                       A =   0.00  Df =  41.8  -23.4 ps  S =  63.6 ps  Cin =  0.0 ff  Cout =  12.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     102 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 652.8 -493.1 ps  S =  91.7 ps  Cin =  1.5 ff  Cout =   1.7 ff  Cmax = 310.4 ff  G =  108  
ABC: Path  2 --     104 : 3    4 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1139.7 -859.5 ps  S =  96.5 ps  Cin =  1.5 ff  Cout =   9.1 ff  Cmax = 310.4 ff  G =  561  
ABC: Path  3 --     109 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df =1668.4-1270.6 ps  S =  90.1 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 310.4 ff  G =   89  
ABC: Path  4 --     110 : 3    1 sky130_fd_sc_hd__a21bo_2 A =  10.01  Df =1983.1 -118.5 ps  S = 186.4 ps  Cin =  2.0 ff  Cout =  33.4 ff  Cmax = 288.4 ff  G = 1644  
ABC: Start-point = pi11 (\display.refresh_counter [11]).  End-point = po22 ($auto$rtlil.cc:2684:MuxGate$1429).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   20/   24  lat =    0  nd =    68  edge =    165  area =569.39  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-eDGgvZ/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:        internal signals:       61
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       24
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 164 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

63. Printing statistics.

=== TopModule ===

   Number of wires:                 90
   Number of wire bits:            130
   Number of public wires:          26
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2         5
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__and4_2         6
     sky130_fd_sc_hd__buf_1         11
     sky130_fd_sc_hd__conb_1        39
     sky130_fd_sc_hd__dfxtp_2       20
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__nand2_2        3
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         4
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__or2_2          3
     sky130_fd_sc_hd__or3_2          6
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         5

   Chip area for module '\TopModule': 1141.094400

64. Executing Verilog backend.
Dumping module `\TopModule'.

65. Executing JSON backend.

End of script. Logfile hash: 396c1face5, CPU: user 0.38s system 0.00s, MEM: 42.85 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 29% 2x abc (0 sec), 17% 2x read_liberty (0 sec), ...
